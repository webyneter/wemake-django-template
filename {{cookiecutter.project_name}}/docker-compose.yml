---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

version: "3.8"

services:
  web:
    image: {{ cookiecutter.project_name }}:development
    build:
      target: development
      context: .
      dockerfile: ./docker/web/Dockerfile
      args:
        ENVIRONMENT: "${ENVIRONMENT}"
      cache_from:
        - {{ cookiecutter.project_name }}:development
        - {{ cookiecutter.project_name }}:latest
        - "*"
    depends_on:
      - postgres
    volumes:
      - web-static:/var/www/web/static
    env_file: ./config/.env
    environment:
      POSTGRES_HOST: postgres
    networks:
      - web
      - postgres
    command: python -Wd manage.py runserver 0.0.0.0:8000
    healthcheck:
      # We use `$$` here because:
      # one `$` goes to shell,
      # one `$` goes to `docker-compose.yml` escaping
      test: |
        /usr/bin/test $$(
          /usr/bin/curl --fail http://localhost:8000/health/?format=json
          --write-out "%{http_code}" --silent --output /dev/null
        ) -eq 200
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:16.1-bullseye
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file: ./config/.env
    networks:
      - postgres
    healthcheck:
      test: 'pg_isready --username="${POSTGRES_USER}" --dbname=="${POSTGRES_DB}"'
      start_period: 10s
      interval: 10s
      timeout: 9s
      retries: 5

volumes:
  postgres-data:
  web-static:

networks:
  postgres:
  web:
